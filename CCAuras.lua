-- 被放逐
function UnitIsBanished(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("飓风",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("放逐术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("风暴之箭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("定罪之槌",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("旋风",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("自我放逐",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("束缚",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("燃烧新星",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("禁闭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("束缚元素",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Paralyze",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("放逐",time,0,nil,unitid))then return true;end return false;end
-- 被控制
function UnitIsCharmed(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("诱惑",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("忠诚誓言",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("支配",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("疯狂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心醉神迷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("统御意志",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("精神控制",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("侏儒精神控制帽",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("疯狂诱惑",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("奴役恶魔",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Confused Cansis",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("支配心智",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心灵干涉",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("洗脑",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("魅惑",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("导致疯狂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("统御",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("舞会",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("侏儒洗脑帽",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("控制机械",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("召唤魅惑图腾",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Confused Ogre",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("致命拥抱",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("精神之毒",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("灵魂支配",time,0,nil,unitid))then return true;end return false;end
-----
function UnitIsNotAbleAttack(unitid,time)return UnitIsBanished(unitid,time) or UnitIsCharmed(unitid,time) end 
-- 睡眠
function UnitIsAsleep(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("下潜",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("催眠术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("特效无梦睡眠",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("翼龙钉刺",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("钻骨",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("沉睡",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("萨博迈恩的催眠粉",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("从梦境中醒来",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("麻醉剂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("强效昏睡",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("说教",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("无梦睡眠",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("德鲁伊的睡眠",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("毒气炸弹",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("睡眠",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("休眠",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("昏睡",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("催眠曲",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("纳拉雷克斯的梦魇",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Ice Bore Passive",time,0,nil,unitid))then return true;end return false;end
-- 瘫痪
function UnitIsIncapacitated(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("冲击波",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("熔岩爆裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("闷棍",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("头部重击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("凿击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("烈焰消散",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("忏悔",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("无畏冲锋",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("邪雾",time,0,nil,unitid))then return true;end return false;end
-- 束缚亡灵
function UnitIsShackled(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("束缚亡灵",time,0,nil,unitid))then return true;end return false;end
-- 被变形
function UnitIsPolymorphed(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("变形术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("妖术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("兔子装",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("开花的树枝",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("SelfSheep",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("变鸡术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("复活节小兔",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("退化",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("变形辐射",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("[DND] Bat Transform",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("[DND] Tiger Transform",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("海盗装束",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("忍者装束",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("麻风侏儒装束",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("随机装束",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("骷髅装束",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("鱼人的妖术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("变羊术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("火鸡的羽毛",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Quest",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("蝙蝠装束",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("鬼魂装束",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("小精灵装束",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("变形术：蜘蛛（非玩家）",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("PX-238冬幕欢乐制造器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("烈焰绽放",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("狂野变形",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("卡尔琳达的惩罚",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("强效变形术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("召唤恐怖的巨魔",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("变形术：蜘蛛",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("嘭！",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("噬体烈焰",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("晦气",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("化学去皮",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("变成小鸡！",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("[DND] Travel Transform",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Polymorph Cast Visual",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("天灾鼠诅咒",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("家畜",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("变虫术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Polymorph (TEST)",time,0,nil,unitid))then return true;end return false;end
-- 被迷惑 致盲之类
function UnitIsDisoriented(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("粗鲁投掷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("致盲之网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("龙息术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("回火",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("丢掷污泥",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("致盲",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("头部重击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("疯狂之眼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("说服之歌",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("沙尘喷溅",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("水银腐蚀",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("致盲毒素",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("致盲之尘",time,0,nil,unitid))then return true;end return false;end
-- 被闷棍
function UnitIsSapped(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("闷棍",time,0,nil,unitid))then return true;end return false;end
-----
function UnitIsBeOutControl(unitid,time)return UnitIsIncapacitated(unitid,time) or UnitIsShackled(unitid,time) or UnitIsPolymorphed(unitid,time) or UnitIsDisoriented(unitid,time) or UnitIsSapped(unitid,time) end 
-- 因恐惧而逃跑
function UnitIsFleeing(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("恐惧嚎叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("昏迷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("闪光炸弹",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐吓咆哮",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("快跑！",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐惧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐惧咆哮",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心灵尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐吓",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("惊骇尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("畏惧逃散",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("胁迫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐惧尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("折磨浆液",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("破胆怒吼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("自身恐惧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心灵哀嚎",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐惧光环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("绝望之翼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("畏缩咆哮",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("点燃",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐慌",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("低吼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("死亡显现",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("破胆咆哮",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("黑暗命令",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("极限恐怖",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("梦魇乍醒",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("惊声尖叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("混乱尖叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("盲目之光",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("憎恨怒视",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("雷霆怒吼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("煽动惊恐",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("闪电恐惧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Terrifying Roar",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐吓尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐吓嚎叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐惧畏缩",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("术士恐惧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("腐化恐惧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("主宰的气息",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐慌之鼓",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("自我恐惧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐吓匕潭失落者",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("灵魂尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐惧惊骇",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("闪光雷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐吓野兽",time,0,nil,unitid))then return true;end return false;end
-- 恐惧
function UnitIsHorrified(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("亵渎尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐慌",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心灵惊骇",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("罪与罚",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("死亡缠绕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("婚礼恐惧症",time,0,nil,unitid))then return true;end return false;end
-----
function UnitIsBeFear(unitid,time)return UnitIsHorrified(unitid,time) end 
-- 流血
function UnitIsBleeding(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("刺破",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("穿刺",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("珊瑚切割",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("穿刺钳",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("裂伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("痛苦之伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("撕裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("锁喉",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("溢血之伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("重伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("抓伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("灵界打击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("削弱灵魂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("匕首投掷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("血肉腐烂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("血祭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("凶残挥砍",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("鹰爪",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("割裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("暴露伤口效果",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("毁灭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("野蛮突袭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("凿眼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("血盆大口",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("斜掠",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("龟裂创伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("死亡疫病",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("锯齿劈斩",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("撕裂肉体",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("劈头斧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("血肉撕咬",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("血之气息",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("撕裂血肉",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("刺裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("重伤投掷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("血袭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("痛苦旋风",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("穿刺爪击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("割伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("角刺",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("利刃切割",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("严重致伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("尖牙撕咬",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("伤口迸裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("刺伤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("细剑疾刺",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("旧患",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("淤血",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("穿刺射击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("收缩撕裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("刺穿肺部",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("重击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("野蛮撕扯",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("钝击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("岩石钻孔",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("鲜血治疗",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("源质刺盾",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Elementium Spike Shield",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("投掷",time,0,nil,unitid))then return true;end return false;end
-- 缴械
function UnitIsDisarmed(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("利爪",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("钳取",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("缴械",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("丢掉武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("收取武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("窃取武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("装备武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("抓住武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Copy Ranged Weapon",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("粘稠沥青",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心灵惊骇",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("魔化武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("炽热报复",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Disarm (TEST)",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("拆卸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("丢弃武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("夺械",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Copy Off-hand Weapon (No Threat)",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("丢下武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("镜像副手武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("武器脱手",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("激流",time,0,nil,unitid))then return true;end return false;end
-- 被冰冻
function UnitIsFrozen(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("冰冻陷阱效果",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰冻陷阱",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("召唤冰霜之墓",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("饥饿之寒",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("静止",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("寒冰屏障",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜之环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("拉文德维尔的寒冰屏障",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("陷阱锁链",time,0,nil,unitid))then return true;end return false;end
-- 无法移动
function UnitIsRooted(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("霜纹投网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("纠缠根须",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("钢铁根须",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Freeze",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("窒息缠绕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("纠缠",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("网缚",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("灵魂冷却",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜新星",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("投网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("反击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("铁纹网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("诱捕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("钩网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("寒冰之浪",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("水晶锁链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("寒冰之握",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("利爪握取",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("寒冰锁链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("强化摔绊",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("结网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("钉身",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("撒网器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("粘液网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("烈焰导管",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("烬丝网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("充电网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("镇压之网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("纳拉克西斯之网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("缠绕之藤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("罗网冲击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("捕熊陷阱",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("攻击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("蓝色新星",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜吐息",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("大地之握",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("纠缠射击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("战网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("野猪网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("寒冰跳跃",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("邪能镣铐",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("大地静止",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("横扫摔绊",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("厄兆光环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("丛生",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("包围之网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("断筋雕文",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("利爪之握",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("强化冰锥术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("陷地",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("锚住",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("黑暗泥浆",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("烈焰之环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("缚灵",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("深度冻结",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("符文编织",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("蓝色烈焰之环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("麻痹",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("暗影新星",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("防火网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("陷阱",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜之环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("律法之链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("刺网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冲锋",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Net",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("罩网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("静电缠握",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("活跃暗影",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("晶化",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰冻之环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("定身",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("寒冰新星",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("绊脚",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("活动故障",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("震荡冲击波",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("锁颚",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("磁场",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("强化断筋",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("混乱之网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("大地之缚",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("覆体之网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("纠结根须",time,0,nil,unitid))then return true;end return false;end
-----
function UnitIsCanntMove(unitid,time)return UnitIsFrozen(unitid,time) or UnitIsRooted(unitid,time) end 
-- 移动速度降低
function UnitIsEnsnared(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("黏液爆炸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜攻击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("精神鞭笞",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("血槌烈酒",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("燃烧之恨",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("窒息之藤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("水泡",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("断筋",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("专注爆裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("维克尼斯催化",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜射击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("雷霆一击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("伊森哈德扫击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("奥术之流",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("熔岩镣铐",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("酩酊大醉",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("瑞文戴尔男爵的灵魂吸取",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("长时间眩晕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("刺耳怒吼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("上古之火",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Random Bursts",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("夺魂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("恐怖嚎叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("减速",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("野性横扫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("含毒之刺",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("酸性淤泥",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("真菌蔓延",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("眩晕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜绽放",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("残废术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("磁性牵引",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("劫掠者疫病",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("筋疲力尽",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("泡沫水柱",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("复活节惊骇",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("暗影涌动",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("减速术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("寒冰锁链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("裂筋",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("群体减速",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("诱捕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("熔化矿石",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜之雾",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("充能",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("枯萎",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("水晶冻结",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("精神灼烧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Frost Trap Aura",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("蔓延之藤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("软泥爆发",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("已完成的蒸馏步骤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("焦油",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("震荡打击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("灵魂灼热",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冲击弹幕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("突刺",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("双帆龙嚎叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("碎踝",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("喷泉",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("黑鳍蘑菇",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("蘑菇凋零",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("亚勒伯龙之怒",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("扫荡",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("夺魂怒吼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("眩晕——复仇者之盾",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("刺耳尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冰霜陷阱光环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("锥形闪电",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("打劫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("印记碎裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("灵魂鞭笞",time,0,nil,unitid))then return true;end return false;end
-- 眩晕
function UnitIsDazed(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("复仇者之盾",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("霜灼药方",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("风暴之锤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("清算",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("火球链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("眩晕",time,0,nil,unitid))then return true;end return false;end
-- 昏迷
function UnitIsStunned(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("战争践踏",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("龙尾扫击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冲锋",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("风暴之锤",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("穿刺",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("昏迷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("时间停止",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("结晶",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("断背",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("击脑",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("肾击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("昏迷炸弹",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("肚子痛",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("偷袭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("震荡猛击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("暗影挥砍",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("猛踢",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("火焰破裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("斯卡尔德",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("亡者的尖叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("胸闷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("紊乱心智",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冲锋昏迷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("扫尾",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("魔铁炸弹",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("蛛网裹体",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("潮汐咒符",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("白骨爆破",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心灵尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("爆破射击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("阵风",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心碎欲绝",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("巨大锁链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("沙虫横扫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("雷霆震裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("火屑弹幕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("突然攻击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Stun Forever",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("思维链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("电荷冲击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("烟雾弹",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("水晶闪耀",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("断线",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("冲锋击昏",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("厄兆光环",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("雷霆震荡",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("蹬踏",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("撞头",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Legion Ring",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("暗影刺击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("暴风之箭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("接铲！",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("昏睡",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("鞭笞",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("召唤眩晕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("碎脊者",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("肩顶",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("大地践踏",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("束缚之链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("尾击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("撞击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("敲头",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("勒绞绳",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("筋疲力尽",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("催眠术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("玛罗恩的猛击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("心悸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("横扫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("石化之瓶",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("重踏",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("昏迷冲击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("陈酿白兰地",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("混乱烈焰",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("爆炸水晶",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("眩晕之力",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("碎颅",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Bomb Test",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("绝望打击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("耳光",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("灵纹投网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("重型灵纹投网",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("昏迷猛击",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("石爪昏迷",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("清算",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("凿眼",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("眩晕",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("桎梏锁链",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("扫尾攻击",time,0,nil,unitid))then return true;end 
if(not WA_CheckDebuff("击倒",time,0,nil,unitid))then return true;end 
return false;
end
-----
function UnitIsIncoma(unitid,time)return UnitIsDazed(unitid,time) or UnitIsStunned(unitid,time) end 
-- 有盾
function UnitIsShielded(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("共享联结",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("热疫疲惫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("真言术：盾",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("虚弱灵魂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("Power Word: Shield 500",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("被弱化的灵魂",time,0,nil,unitid))then return true;end return false;end
-- 被沉默
function UnitIsSilenced(unitid,time)if(not time)then time=1 end if(not WA_CheckDebuff("灼热烈焰",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("法力封锁",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("往日的尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("回响",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("沉默",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("暮光闪电箭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("阿兹加洛之嚎",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("奥术洪流",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("女妖尖叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("扭曲相位",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("音爆",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("耶克里克的守护",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("震耳警报",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("音素爆破",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("震荡波",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("扰动之吠",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("监护者之握",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("召唤映像",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("震耳咆哮",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("日光术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("刺骨之语",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("疑虑",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("弱化武器",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("法术封锁",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("灵魂燃烧",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("奥术爆裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("绞袭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("凄厉哀嚎",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("记忆消除",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("法术反制",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("女妖的尖叫",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("地震术",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("沉默尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("奥术炸弹",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("腐烂恶臭",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("震耳尖啸",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("音速爆裂",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("暗影之拥",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("混乱急躁",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("压制",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("永恒沉默",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("永恒残渣",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("锁喉沉默",time,0,nil,unitid))then return true;end if(not WA_CheckDebuff("图书馆员的嘘声",time,0,nil,unitid))then return true;end return false;end

function printalldebuf(unitid)
	local buf = "";
	for i=1,40 do 
		local n,_,_,_,_,_,_,_,s=UnitAura("target",i,"HARMFUL");
		if(not n)then break; end
		buf = buf.." "..n;
	end
	print(buf);
--	local name,rank,iconTexture,count,debuffType,duration,expirationTime,source=UnitAura(unitId,index,"HARMFUL");
end